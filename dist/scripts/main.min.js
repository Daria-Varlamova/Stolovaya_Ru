"use strict" 
let body = document.querySelector("body");
let burger = body.querySelector(".burger-menu");
let navList = body.querySelector(".menu-nav__list");
let menuNavItem = body.querySelectorAll('.menu-nav__item');

console.log(menuNavItem)

function toggleMenu () {
   body.classList.toggle("open-menu");
}

burger.addEventListener("click", toggleMenu);

for (let i = 0; i < menuNavItem.length; i ++) {
   menuNavItem[i].addEventListener('click' , function  (){
      body.classList.remove("open-menu");
   })
};const mesureWidth = (item) => {
    let reqItemWidth = 0;
    
    const screenWidth = $(window).width();
    const container = item.closest(".colors-acco");
    const titlesBlocks = container.find(".colors-acco__trigger");
    const titlesWidth = titlesBlocks.width() * titlesBlocks.length;

    const textContainer = item.find(".colors-acco__container");
    const paddingLeft = parseInt(textContainer.css("padding-left"));
    const paddingRight = parseInt(textContainer.css("padding-right"));

    const isMobile = window.matchMedia("(max-width: 768px)").matches;
    

    if (isMobile) {
        reqItemWidth = screenWidth - titlesWidth;
    } else {
        reqItemWidth = 500;
    }

    return {
        container: reqItemWidth,
        textContainer: reqItemWidth - paddingLeft - paddingRight
    }
};

const closeEveryItemInContainer = container => {
    const items = container.find(".colors-acco__item");
    const content = container.find(".colors-acco__content");

    items.removeClass("active");
    content.width(0);
}

const OPENItem = item => {
    const hidenContent = item.find(".colors-acco__content");
    const reqWidth = mesureWidth(item);
    const textBlock = item.find(".colors-acco__container");

    item.addClass("active");
    hidenContent.width(reqWidth.container);
    textBlock.width(reqWidth.textContainer)
}


$(".colors-acco__trigger").on("click", e => {
    e.preventDefault();

    const $this = $(e.currentTarget);
    const item = $this.closest(".colors-acco__item");
    const itemOpend = item.hasClass("active");
    const container = $this.closest(".colors-acco");

    if (itemOpend) {
        closeEveryItemInContainer(container);
    } else {
        closeEveryItemInContainer(container);
        OPENItem(item);
    }
});

$(".colors-acco__close").on("click", e => {
    e.preventDefault();
    closeEveryItemInContainer($(".colors-acco"));
});;const validateFields = (form, fieldsArray) => {
    fieldsArray.forEach((field) => {
        field.removeClass("input-error");
        const val = field.val();
        if (val.trim() === "") {
            field.addClass("input-error");
        }
    });

    const errorFields = form.find(".input-error");
    const isErrors = errorFields.length === 0;
    return isErrors;
}

$('.form').submit(e => {
    e.preventDefault();

    const form = $(e.currentTarget);
    const name = form.find("[name='name']");
    const phone = form.find("[name='phone']");
    const comment = form.find("[name='comment']");
    const to = form.find("[name='to']");

    const modal = $("#modal");
    const content = modal.find(".modal__title");

    modal.removeClass("error-modal");

    const isValid = validateFields(form, [name, phone, comment, to]);

    if (isValid) {
        $.ajax({
            url: "https://webdev-api.loftschool.com/sendmail/",
            method: "post",
            data: {
                name: name.val(),
                phone: phone.val(),
                comment: comment.val(),
                to: to.val()
            },
            success: (data) => {
                content.text(data.message);
                $.fancybox.open({
                    src: "#modal",
                    type: "inline"
                });
            },
            error: data => {

                console.log(data);
                const message = data.responseJSON.message;
                content.text(message);
                modal.addClass("error-modal");

                $.fancybox.open({
                    src: "#modal",
                    type: "inline"
                });
            }

        });
    }
});

$(".app-submit-btn").click(e => {
    e.preventDefault();

    $.fancybox.close();
});const sections = $("section");
const display = $(".maincontent");

sections.first().addClass('active');

let inScroll = false;

const performTransition = sectionEq => {
    if (inScroll) { return; }

    inScroll = true;

    const position = sectionEq * -100;

    display.css({
        transform : `translateY(${position}%)`
    });

    sections.eq(sectionEq).addClass('active').siblings().removeClass('active');

    setTimeout(() => {
        inScroll = false;

        const currentSection = sections.eq(sectionEq);
        const menuTheme = currentSection.attr('data-sidemenu-theme');
        const sideMenu = $('.fixed-menu');

        sideMenu
            .find('.fixed-menu__item--active a')
            .css({ borderColor: 'transparent' });
        sideMenu
            .find('.fixed-menu__item--active .menu-link-dot-decoration')
            .css({ backgroundColor: '#C4C4C4' });

        sideMenu
            .find('.fixed-menu__item')
            .eq(sectionEq)
            .addClass('fixed-menu__item--active')
            .siblings()
            .removeClass('fixed-menu__item--active');

        const sideMenuActiveLink = $('.fixed-menu__item--active a');
        const sideMenuActiveLinkDot = $('.fixed-menu__item--active .menu-link-dot-decoration');

        sideMenuActiveLink.css({ borderColor: menuTheme });
        sideMenuActiveLinkDot.css({ backgroundColor: menuTheme })

    }, 1300);
}

const scrollViewport = (direction) => {
    const activeSection = sections.filter('.active');
    const nextSection = activeSection.next();
    const prevSection = activeSection.prev();

    if (direction === 'next' && nextSection.length) {
        performTransition(nextSection.index());
    }
    if (direction === 'prev' && prevSection.length) {
        performTransition(prevSection.index());
    }
}

$(window).on("wheel", e => {

    const deltaY = e.originalEvent.deltaY;

    if (deltaY > 0) {
        scrollViewport('next');
    }

    if (deltaY < 0) {
        scrollViewport('prev');
    }

});

$(window).on('keydown', (e) => {
    const tagName = e.target.tagName.toLowerCase();

    if (tagName === 'input' || tagName === 'textarea') { return; }

    switch (e.keyCode) {
        case 38:
            scrollViewport('prev');
            break;
        case 40:
            scrollViewport('next');
            break;
    }
});

$('[data-scroll-to]').click((e) => {
    e.preventDefault();

    const $this = $(e.currentTarget);
    const target = $this.attr('data-scroll-to');
    const reqSection = $(`[data-section-index="${target}"]`);

    performTransition(reqSection.index());
});

$(function() {
    const md = new MobileDetect(window.navigator.userAgent);

    if (md.mobile()) {
        $('.wrapper').on('touchmove', (e) => e.preventDefault());

        $("body").swipe( {
            swipe: function(event, direction) {
                console.log(direction);

                if (direction === 'up') {
                    scrollViewport('next');
                }
                if (direction === 'down') {
                    scrollViewport('prev');
                }
            }
        });
    }
});; const slider = $('.slider__list').bxSlider({ pager: false, controls: false });
 
 $(".slider__btn--prev").click(e => {
     e.preventDefault();
     slider.goToPrevSlide();
 })

 $(".slider__btn--next").click(e => {
     e.preventDefault();
     slider.goToNextSlide();
 });const findBlockByAlias = (alias) => {
    return $(".reviews__item").filter((ndx, item) => {
        return $(item).attr("data-linked-with") === alias;
    });
};


$(".interactive-avatar__link").click((e) => {
    e.preventDefault();

    const $this = $(e.currentTarget);
    const target = $this.attr("data-open");
    const itemToShow = findBlockByAlias(target);
    const curItem =  $this.closest(".reviews__switcher-item");

    itemToShow.addClass("active").siblings().removeClass("active");
    curItem.addClass("active").siblings().removeClass("active");

});

;const openItem = (item) => {
    const container = item.closest(".team__item");
    const contentBlock = container.find(".team__details");
    const textBlock = contentBlock.find('.team__details-block');
    const reqHeight = textBlock.height();

    container.addClass("active");
    contentBlock.height(reqHeight);
};

const clouseEveryItem = (container) => {
    const items = container.find(".team__details");
    const itemContainer = container.find(".team__item");

    itemContainer.removeClass("active");
    items.height(0);
};

$(".team__title").click((e) => {
    const $this = $(e.currentTarget);
    const container = $this.closest(".team");
    const elemContainer = $this.closest(".team__item");

    if (elemContainer.hasClass("active")) {
       clouseEveryItem(container);
    } else {
        clouseEveryItem(container);
        openItem($this);
    }
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
